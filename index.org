#+title: パッケージを配ろう
#+subtitle: pycon九州2024
#+author: Atsushi Odagiri
#+DATE: 2024-04-25
#+BEAMER_THEME: Boadilla
#+BEAMER_COLOR_THEME: seahorse
#+OPTIONS: H:2 toc:t num:t
#+OPTIONS: ^:{}
#+LaTeX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [aspectratio=169]
#+LaTeX_HEADER: \usepackage{luatexja}
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col)

* パッケージを配ろう
** お前誰よ
***  
:PROPERTIES:
:BEAEMER_COL: 0.48
:BEAMER_ENV: block
:END:
   - Atsushi Odagiri
   - Open Collector
   - Pythonは1.5くらいのころから

*** 
:PROPERTIES:
:BEAEMER_COL: 0.48
:BEAMER_ENV: block
:END:

#+ATTR_LATEX: :width 2cm
[[./r-penta512.png]]

#+ATTR_LATEX: :width 2cm
[[./oc-logo.png]]
#+ATTR_LATEX: :width 2cm
[[./logo-w.png]]
* パッケージを配るということ
** パッケージエコシステム

- 作る
  - setuptools, poetry-core, hatchling...
- 配る
  - pypi
- 使う
  - pip, poetry, hatch...

** パッケージを配るということ

- 広く一般に向けて配る
- 狭い範囲で限られた利用のために配る

** 広く一般に向けてpypiで配る

- PyPAツールのデフォルト
- ~tween~ でアップロード
- ~pip~ がダウンロードしてインストール

** 狭い範囲で限られた利用のために配る

- マイクロサービスのそれぞれて使うようなライブラリ
- 特殊なパッチをあてたローカルフレーバーライブラリ

** 狭い範囲で配る

- 社内ネットワークやVPNの中で
- k8sやvpcの中で
- 範囲内のIPアドレスにだけ
- 認証をつけたい

** httplib.server でのお手軽repository
- ダウンロードできるリンクがあればいいので ~http~ モジュールでサーバーを起動するだけ
- wheelファイルのあるディレクトリで実行

#+begin_src shell
  python3 -m pip download pyramid
  python3 -m http.server
#+end_src

[[./http-server-simple-repository.png]]

** URL指定でインストール

- pipはURL指定で直接インストールできる
- 正確なファイル名を知らないといけない
- wheelはプラットフォームなどの情報を含んでいる

#+begin_src shell
    pip install \
        http://localhost:8000/pyramid-2.0.2-py3-none-any.whl
#+end_src

** 複雑なwheelファイル名
- oh...
#+begin_example
zope.interface-6.4
-cp311
-cp311
-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64
.whl
#+end_example
** find-links

- ~find-links~ で指定した場所から探しだしてもらう
#+begin_src shell
  pip install -f http://localhost:8000 zope.interface
#+end_src

** no-index

- 場合によってはpypiへの接続も制限される環境
- 全てをお手軽repositoryから取得するなら ~no-index~ も使うようにしてみよう

- ~no-index~ pypiなどのindexを見にいかない
- ~find-url~ 指定したページからダウンロードURLをスクレーピング

** indexは必要？

- pipを直接使うなら ~find-url~ でもいいかも？
- メタデータを取得するのに配布物をダウンロードするという効率の悪さはある
- ~poetry source add~ で使えるのは simple repository
  - pipだと ~--index-url~ で指定するものに相当

** 独自のpypiを立てたい!

- PyPI自体のソースコードは公開されている
  - https://github.com/pypi/warehouse
  - インフラ構築保守など手間もかかる
- devpi
  - https://github.com/devpi/devpi
  - PyPIへのプロキシやプロジェクトごとの名前空間設定など多機能
  - それなりにインフラ構築保守の手間がかかる
- ~http.server~ くらいに簡単に立ち上って欲しいところ

* パッケージを配るためのPEP
** パッケージを配るためのPEP
- [[https://peps.python.org/pep-0458][PEP 458 – Secure PyPI downloads with signed repository metadata]]
- [[https://peps.python.org/pep-0480][PEP 480 – Surviving a Compromise of PyPI: End-to-end signing of packages]]
- [[https://peps.python.org/pep-0503/][PEP 503 – Simple Repository API]]
- [[https://peps.python.org/pep-0592][PEP 592 – Adding “Yank” Support to the Simple API]]
- [[https://peps.python.org/pep-0629][PEP 629 – Versioning PyPI’s Simple API]]
- [[https://peps.python.org/pep-0658][PEP 658 – Serve Distribution Metadata in the Simple Repository API]]
- [[https://peps.python.org/pep-0691][PEP 691 – JSON-based Simple API for Python Package Indexes]]
- [[https://peps.python.org/pep-0700][PEP 700 – Additional Fields for the Simple API for Package Indexes]]
- [[https://peps.python.org/pep-0714][PEP 714 – Rename dist-info-metadata in the Simple API]]

** Simple Repository

representation

- HTML PEP503
- JSON PEP691

バージョン
- 1.0 PEP503/PEP691
- 1.1 PEP700
- PEP714 メタデータフィールドの取り扱いについての修正
  - warehouseの実装で間違えがあったらしい

** PyPIのSimple Repository

- https://pypi.org/simple/ とても大きいのでアクセス注意！


** 実装方針

- 標準ライブラリでいこう
  - Batteries Included!
- 1ファイルデプロイ
- DBなどを使わず起動するだけで使える

** project list

- ホストしているプロジェクト(ほぼパッケージの意味)を一覧で出すだけ
- v1.0のプロジェクトに関する情報は ~name~ のみ

** 使うライブラリ

- これだけ!
- 100% 標準ライブラリのみ!

#+begin_src python :tangle micropypiapp.py
import argparse
import hashlib
import itertools
import json
import operator
import pathlib
import re
import zipfile
from typing import TypedDict, NotRequired, Iterable
from wsgiref.types import WSGIApplication, WSGIEnvironment, StartResponse
from wsgiref.simple_server import make_server
#+end_src

** Meta

- simple repositoryに関する情報
- バージョン

#+begin_src python :tangle micropypiapp.py
  Meta = TypedDict(
      "Meta",
      {
          "api-version": str,
      },
  )
#+end_src

** project detail

- プロジェクト(パッケージ)ごとのダウンロード可能なファイル一覧
- ファイルのURLやパッケージメタデータなど

** project fileのtyping

- 事前に確認可能なパッケージメタデータ
- ダウンロードに必要な情報 URLやハッシュ

#+begin_src python :tangle micropypiapp.py
  ProjectFile = TypedDict(
      "ProjectFile",
      {
          "filename": str,
          "url": str,
          "hashes": dict[str, str],
          "requires-python": NotRequired[str],
          "dist-info-metadata": NotRequired[bool],
          "core-metadata": NotRequired[bool],
          "gpg-sig": NotRequired[bool],
          "yanked": NotRequired[bool],
      },
  )

#+end_src
  
** project detailのtyping

- project fileの一覧が主な情報

#+begin_src python :tangle micropypiapp.py
  ProjectDetail = TypedDict(
      "ProjectDetail",
      {
          "name": str,
          "files": list[ProjectFile],
          "meta": Meta,
      },
  )

#+end_src

** project list のtyping

#+begin_src python :tangle micropypiapp.py
  Project = TypedDict("Project", {"name": str})
  ProjectList = TypedDict(
      "ProjectList",
      {
          "meta": Meta,
          "projects": list[Project],
      },
  )

#+end_src

** wheelファイルを探しだす

- pathlibでできちゃうね!

#+begin_src python
  wheelhouse.glob("*.whl")
#+end_src

** wheelファイル名から情報を取得

- wheelファイルのファイル名は形式が決まっている
  - PEP 491 The Wheel Binary Package Format 1.9
  - ~{distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl.~

** wheelファイル名から情報を取得
- 今回欲しいのは ~distiribution~
- ~"-"~ で ~split~ して最初の1つ

#+begin_src python :tangle micropypiapp.py
  def extract_dist_name(wh: pathlib.Path) -> str:
      return wh.name.split("-", 1)[0]
#+end_src

** プロジェクト名を正規化

- PEP 503 で正式に正規化方法が定義されている
- アルファベットは全て小文字
- 記号は ~-~ に正規化
- 例: ~zope.interface~ -> ~zope-interface~

#+begin_src python :tangle micropypiapp.py
  def normalize(name: str) -> str:
      return re.sub(r"[-_.]+", "-", name).lower()
#+end_src

** metadata
- METADATAをwheelから取り出す
- wheelはzipファイル
- METADATAの場所は決まっている
  - PEP 491 The Wheel Binary Package Format 1.9
  - ~{distribution}-{version}.dist-info/~ contains metadata.

#+begin_src python :tangle micropypiapp.py
  def get_metadata(whl: pathlib.Path):
      parts = whl.name.split("-")
      dist_name, version = parts[0], parts[1]
      metadata_path = f"{dist_name}-{version}.dist-info/METADATA"
      with zipfile.ZipFile(whl) as zf:
          with zf.open(metadata_path) as metadata:
              return metadata.read()

#+end_src

** 全部まとめてwheelファイルの情報を取得

- プロジェクト名をキーにしてメタデータとwheelファイルパスをグルーピング

#+begin_src python :tangle micropypiapp.py
  def load_wheels(
      wheelhouse: pathlib.Path,
  ) -> Iterable[tuple[str, Iterable[tuple[str, bytes, pathlib.Path]]]]:
      wheels = itertools.groupby(
          (
              (normalize(extract_dist_name(w)), get_metadata(w), w)
              for w in wheelhouse.glob("*.whl")
          ),
          key=operator.itemgetter(0),
      )
      return wheels
#+end_src
** プロジェクトごとにファイル情報をまとめる

- プロジェクト名、メタデータ、wheelファイルパスをもとにJSONデータを作成


#+name: project-file-loop
#+begin_src python
  project = ProjectDetail(
      {"name": project_name, "files": [], "meta": meta})
  project_details[project_name] = project
  for _, metadata, p in files:
      hash = hashlib.sha256(p.read_bytes()).hexdigest()
      f = ProjectFile(
          {
              "filename": p.name,
              "url": f"/{project_name}/files/{p.name}",
              "hashes": {
                  "sha256": hash,
              },
              "dist-info-metadata": True,
              "core-metadata": True,
          }
      )
      project["files"].append(f)

#+end_src
#+name: loop
#+begin_src python :noweb yes :exports none
  for project_name, files in load_wheels(wheelhouse):
    project_list["projects"].append(Project({"name": project_name}))
    <<project-file-loop>>

#+end_src
#+begin_src python :tangle micropypiapp.py :noweb yes :exports none
  def load_projects(
      wheelhouse: pathlib.Path,
  ) -> tuple[ProjectList, dict[str, ProjectDetail]]:
      meta = Meta({"api-version": "1.0"})

      project_list = ProjectList(
          {
              "meta": meta,
              "projects": [],
          }
      )

      project_details: dict[str, ProjectDetail] = {}
      <<loop>>
      return project_list, project_details

#+end_src

** wsgiアプリケーション:project list
#+begin_src python :tangle micropypiapp.py
  class ProjectListApp:
      def __init__(self, project_list: ProjectList) -> None:
          self.project_list = project_list

      def __call__(
          self, environ: WSGIEnvironment, start_response: StartResponse
      ) -> Iterable[bytes]:
          start_response(
              "200 OK", [("Content-Type", "application/vnd.pypi.simple.v1+json")]
          )
          return [json.dumps(self.project_list).encode("utf-8")]

#+end_src
** wsgiアプリケーション:project detail
#+begin_src python :tangle micropypiapp.py
  class ProjectDetailApp:
      def __init__(self, project_details: dict[str, ProjectDetail]) -> None:
          self.project_details = project_details

      def __call__(
          self, environ: WSGIEnvironment, start_response: StartResponse
      ) -> Iterable[bytes]:
          project_name = environ["wsgiorg.routing_args"][1]["project_name"]
          if project_name not in self.project_details:
              return not_found(environ, start_response)
          start_response(
              "200 OK", [("Content-Type", "application/vnd.pypi.simple.v1+json")]
          )
          return [json.dumps(self.project_details[project_name]).encode("utf-8")]

#+end_src
** wsgiアプリケーション:ダウンロード
- wheelファイルの中身をレスポンスボディにする
- wheelのcontent-typeは特に決まってないので ~application/octet-stream~ にする
- ブラウザでアクセスしたときにダウンロードになるよう ~Content-Disposition~ をつける

#+begin_src python :tangle micropypiapp.py
  class WheelDownloadApp:
      def __init__(self, wheelhouse: pathlib.Path) -> None:
          self.wheelhouse = wheelhouse

      def __call__(
          self, environ: WSGIEnvironment, start_response: StartResponse
      ) -> Iterable[bytes]:
          file_name: str = environ["wsgiorg.routing_args"][1]["wheel_file_name"]
          p = self.wheelhouse / file_name
          if not p.exists():
              return not_found(environ, start_response)
          start_response(
              "200 OK",
              [
                  ("Content-Type", "application/octed-stream"),
                  ("Content-Disposition", f'attachment; filename="{file_name}"'),
              ],
          )
          with p.open("rb") as f:
              return [f.read()]

#+end_src

#+begin_src python :tangle micropypiapp.py
  class WheelMetadataApp:
      def __init__(self, wheelhouse: pathlib.Path) -> None:
          self.wheelhouse = wheelhouse

      def __call__(
          self, environ: WSGIEnvironment, start_response: StartResponse
      ) -> Iterable[bytes]:
          file_name: str = environ["wsgiorg.routing_args"][1]["wheel_file_name"]
          p = self.wheelhouse / file_name
          if not p.exists():
              return not_found(environ, start_response)
          start_response(
              "200 OK",
              [
                  ("Content-Type", "texa/plain"),
              ],
          )
          return [get_metadata(p)]
#+end_src


** WSGIアプリケーションのルーティング

- ~/~ project list
- ~/{project}/~ project detail
- 実際にwheelファイルをダウンロードするURL
  - 今回は ~/{project}/files/{wheel}~ にします
  - メタデータを ~/{project}/files/{wheel}.metadata~ にします

#+begin_src python :tangle micropypiapp.py :exports none
  class RegexDispatch(object):
      def __init__(self, patterns: list[tuple[re.Pattern, WSGIApplication]]):
          self.patterns = patterns

      def __call__(
          self, environ: WSGIEnvironment, start_response: StartResponse
      ) -> Iterable[bytes]:
          script_name: str = environ.get("SCRIPT_NAME", "")
          path_info: str = environ.get("PATH_INFO", "")
          for regex, application in self.patterns:
              match = regex.match(path_info)
              if not match:
                  continue
              extra_path_info = path_info[match.end() :]
              if extra_path_info and not extra_path_info.startswith("/"):
                  # Not a very good match
                  continue
              pos_args = match.groups()
              named_args = match.groupdict()
              cur_pos, cur_named = environ.get("wsgiorg.routing_args", ((), {}))
              new_pos = list(cur_pos) + list(pos_args)
              new_named = cur_named.copy()
              new_named.update(named_args)
              environ["wsgiorg.routing_args"] = (new_pos, new_named)
              environ["SCRIPT_NAME"] = script_name + path_info[: match.end()]
              environ["PATH_INFO"] = extra_path_info
              return application(environ, start_response)
          return not_found(environ, start_response)

  def not_found(environ, start_response) -> Iterable[bytes]:
      start_response("404 Not Found", [("Content-type", "text/plain")])
      return [b"Not found"]

#+end_src

#+name: routing-project-list
#+begin_src python
  r"^/$"
#+end_src

#+name: routing-project-details
#+begin_src python 
  r"^/(?P<project_name>[^/]+)/$"
#+end_src
#+name: routing-wheel
#+begin_src python
  r"^/(?P<project_name>[^/]+)/files/(?P<wheel_file_name>[^/]+\.whl)$"
#+end_src
#+name: routing-metadata
#+begin_src python
  r"^/(?P<project_name>[^/]+)/files/(?P<wheel_file_name>[^/]+\.whl)\.metadata$"
#+end_src
#+name: routing
#+begin_src python :noweb yes :exports none
  (re.compile(<<routing-project-list>>), ProjectListApp(project_list)),
  (
      re.compile(<<routing-project-details>>),
      ProjectDetailApp(project_details),
  ),
  (
      re.compile(
          <<routing-wheel>>
      ),
      WheelDownloadApp(wheelhouse),
  ),
  (
      re.compile(
          <<routing-metadata>>
      ),
      WheelMetadataApp(wheelhouse),
  ),
#+end_src
#+begin_src python :tangle micropypiapp.py :exports none :noweb yes
  def make_app(wheelhouse: pathlib.Path) -> WSGIApplication:
      (project_list, project_details) = load_projects(wheelhouse)
      app: WSGIApplication = RegexDispatch(
          [
              <<routing>>
          ]
      )
      return app
#+end_src

** さあ!wsgiアプリケーションを立ち上げよう!
- 重要なのはwheelファイルを置いてある ~wheelhouse~ ディレクトリ
- ~host~, ~port~ はwebアプリケーションとして必要な情報

#+begin_src python :tangle micropypiapp.py
  def main() -> None:
      parser = argparse.ArgumentParser()
      parser.add_argument("wheelhouse", type=pathlib.Path)
      parser.add_argument("--host", type=str, default="0.0.0.0")
      parser.add_argument("--port", type=int, default=8000)
      args = parser.parse_args()
      app = make_app(args.wheelhouse)
      httpd = make_server(args.host, args.port, app)
      httpd.serve_forever()


  if __name__ == "__main__":
      main()
#+end_src

* まとめ
** まとめ

- パッケージの配布方法
  - 広く一般に配布するなら pypi
  - 狭い範囲で限られた利用のために配る
    - http.server + find-links
    - simple repository + index-url
- simple repositoryはPEPで定義されている
  - 配布する分には意外と簡単
  - 標準ライブラリだけでも実装可能

** 参考文献
- PyPA Simple Repository API, https://packaging.python.org/en/latest/specifications/simple-repository-api/
- The Python Package Index, https://github.com/pypi/warehouse
- Welcome to Warehouse's documentation!, https://warehouse.pypa.io/
