#+title: パッケージを配ろう
#+author: Atsushi Odagiri
#+DATE: 2024-04-25
#+BEAMER_THEME: Madrid
#+BEAMER_COLOR_THEME: beetle
#+OPTIONS: H:2 toc:t num:t
#+OPTIONS: ^:{}
#+LaTeX_CLASS: beamer
#+LaTeX_HEADER: \usepackage{luatexja}
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col)
* パッケージを配ろう
** お前誰よ
***  
:PROPERTIES:
:BEAEMER_COL: 0.48
:BEAMER_ENV: block
:END:
   - Atsushi Odagiri
   - Open Collector
   - Pythonは1.5くらいのころから

*** 
:PROPERTIES:
:BEAEMER_COL: 0.48
:BEAMER_ENV: block
:END:

#+ATTR_LATEX: :width 2cm
[[./r-penta512.png]]

#+ATTR_LATEX: :width 2cm
[[./oc-logo.png]]
#+ATTR_LATEX: :width 2cm
[[./logo-w.png]]
* パッケージを配るということ
** パッケージエコシステム

- 作る
- 配る
- 使う

** パッケージを配るということ

- 広く一般に向けて配る
- 狭い範囲で限られた利用のために配る

** 広く一般に向けてpypiで配る

- PyPAツールのデフォルト
- ~tween~ でアップロード
- ~pip~ がダウンロードしてインストール

** 狭い範囲で限られた利用のために配る

- マイクロサービスのそれぞれて使うようなライブラリ
- 特殊なパッチをあてたローカルフレーバーライブラリ

** 狭い範囲で配る

- 社内ネットワークやVPNの中で
- k8sやvpcの中で
- 範囲内のIPアドレスにだけ
- 認証をつけたい

* パッケージを配るためのPEP
** パッケージを配るためのPEP
- [[https://peps.python.org/pep-0458][PEP 458 – Secure PyPI downloads with signed repository metadata]]
- [[https://peps.python.org/pep-0480][PEP 480 – Surviving a Compromise of PyPI: End-to-end signing of packages]]
- [[https://peps.python.org/pep-0503/][PEP 503 – Simple Repository API]]
- [[https://peps.python.org/pep-0592][PEP 592 – Adding “Yank” Support to the Simple API]]
- [[https://peps.python.org/pep-0629][PEP 629 – Versioning PyPI’s Simple API]]
- [[https://peps.python.org/pep-0658][PEP 658 – Serve Distribution Metadata in the Simple Repository API]]
- [[https://peps.python.org/pep-0691][PEP 691 – JSON-based Simple API for Python Package Indexes]]
- [[https://peps.python.org/pep-0700][PEP 700 – Additional Fields for the Simple API for Package Indexes]]
- [[https://peps.python.org/pep-0714][PEP 714 – Rename dist-info-metadata in the Simple API]]
** Simple Repository
** Metadata
- wheelの中にある ~Metadata~
** JSON
- やることが多い!
** PyPIのSimple Repository
- https://pypi.org/simple/ とても大きいのでアクセス注意！
** pipでsimple repositoryを使う

* 実践package repository
** httplib.server でのお手軽repository
- ダウンロードできるリンクがあればいいので ~http~ モジュールでサーバーを起動するだけ
- wheelファイルのあるディレクトリで実行

#+begin_src shell
  python3 -m pip download pyramid
  python3 -m http.server
  pip install pyramid -f http://localhost:8000/ --no-index
#+end_src

[[./http-server-simple-repository.png]]

** wsgi app

- 標準ライブラリでいこう
  - Batteries Included!
- 1ファイルデプロイ
- DBなどを使わず起動するだけで使える

** 標準ライブラリでwebアプリケーションを書く

- wsgiアプリケーション
- wsgiref
** wheelファイルを探しだす

- wheelファイルのファイル名は形式が決まっている
  ~{distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl.~

** pypi version

- 今回はv1.0の範囲でやってみます

  - PEP691 v1.0
  - PEP714 v1.1

#+begin_src html
  <meta name="pypi:repository-version" content="1.0">
#+end_src

** metadata
- METADATAをwheelから取り出す
#+begin_src python
  def get_metadata(whl: pathlib.Path):
      parts = whl.name.split("-")
      dist_name, version = parts[0], parts[1]
      metadata_path = f"{dist_name}-{version}.dist-info/METADATA"
      with zipfile.ZipFile(whl) as zf:
          with zf.open(metadata_path) as metadata:
              return metadata.read()

#+end_src

** ダウンロードURL
#+begin_src python
              [b"<ul>"]
              + [
                  f'<li><a href="/files/{w}" data-dist-info-metadata="{w}.metadata">{w}</a></li>'.encode(
                      "utf8"
                  )
                  for w in self.repo.wheels
              ]
              + [b"</ul>"]

#+end_src
** ダウンロード
- wheelファイルの中身をレスポンスボディにする
- wheelのcontent-typeは特に決まってないので ~application/octet-stream~ にする
- ブラウザでアクセスしたときにダウンロードになるよう ~Content-Disposition~ をつける
#+begin_src python
      def get_data(self, whl: str) -> bytes:
          with self.wheels[whl]["data"].open("br") as f:
              return f.read()

#+end_src
#+begin_src python
      def __call__(self, environ, start_response) -> Iterable[bytes]:
          whl = environ["wsgiorg.routing_args"][1]["wheel_name"]
          start_response("200 OK", [("Content-type", "application/octet-stream")])
          return [self.repo.get_data(whl)]

#+end_src
** jsonに対応

- project list
- project detail

** project list

- v1.0は ~name~ のみ

#+begin_src python
  Project = TypedDict("Project", {"name": str})
  ProjectList = TypedDict(
      "ProjectList",
      {
          "meta": Meta,
          "projects": list[Project],
      },
  )

#+end_src

** project detail

#+begin_src python
  ProjectDetail = TypedDict(
      "ProjectDetail",
      {
          "name": str,
          "files": list[ProjectFile],
          "meta": Meta,
      },
  )

#+end_src

** project file

- すごく情報量が増えた

#+begin_src python
  ProjectFile = TypedDict(
      "ProjectFile",
      {
          "filename": str,
          "url": str,
          "hashes": dict[str, str],
          "requires-python": NotRequired[str],
          "dist-info-metadata": NotRequired[str],
          "gpg-sig": NotRequired[bool],
          "yanked": NotRequired[bool],
      },
  )

#+end_src
** pipから使う

- project list呼ばれてないかも？

** find-links vs index-url

#+begin_example
$ pip install pyramid --index-url=http://localhost:8000/
#+end_example

** The Update Framework
- TUF

* 参考文献
** 参考文献
- PyPA Simple Repository API, https://packaging.python.org/en/latest/specifications/simple-repository-api/
- The Update Framework, https://theupdateframework.io/
