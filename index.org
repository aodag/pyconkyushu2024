#+title: パッケージを配ろう
#+author: Atsushi Odagiri
#+DATE: 2024-04-25
#+BEAMER_THEME: Madrid
#+BEAMER_COLOR_THEME: beetle
#+OPTIONS: H:2 toc:t num:t
#+OPTIONS: ^:{}
#+LaTeX_CLASS: beamer
#+LaTeX_HEADER: \usepackage{luatexja}
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col)
* パッケージを配ろう
** お前誰よ
***  
:PROPERTIES:
:BEAEMER_COL: 0.48
:BEAMER_ENV: block
:END:
   - Atsushi Odagiri
   - Open Collector
   - Pythonは1.5くらいのころから

*** 
:PROPERTIES:
:BEAEMER_COL: 0.48
:BEAMER_ENV: block
:END:

#+ATTR_LATEX: :width 2cm
[[./r-penta512.png]]

#+ATTR_LATEX: :width 2cm
[[./oc-logo.png]]
#+ATTR_LATEX: :width 2cm
[[./logo-w.png]]
* パッケージを配るということ
** パッケージエコシステム

- 作る
- 配る
- 使う

** パッケージを配るということ

- 広く一般に向けて配る
- 狭い範囲で限られた利用のために配る

** 広く一般に向けてpypiで配る

- PyPAツールのデフォルト
- ~tween~ でアップロード
- ~pip~ がダウンロードしてインストール

** 狭い範囲で限られた利用のために配る

- マイクロサービスのそれぞれて使うようなライブラリ
- 特殊なパッチをあてたローカルフレーバーライブラリ

** 狭い範囲で配る

- 社内ネットワークやVPNの中で
- k8sやvpcの中で
- 範囲内のIPアドレスにだけ
- 認証をつけたい

** httplib.server でのお手軽repository
- ダウンロードできるリンクがあればいいので ~http~ モジュールでサーバーを起動するだけ
- wheelファイルのあるディレクトリで実行

#+begin_src shell
  python3 -m pip download pyramid
  python3 -m http.server
#+end_src

[[./http-server-simple-repository.png]]

** URL指定でインストール

- pipはURL指定で直接インストールできる
- 正確なファイル名を知らないといけない
- wheelはプラットフォームなどの情報を含んでいる

#+begin_src shell
    pip install \
        http://localhost:8000/pyramid-2.0.2-py3-none-any.whl
#+end_src

** 複雑なwheelファイル名
- oh...
#+begin_example
zope.interface-6.4
-cp311
-cp311
-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64
.whl
#+end_example
** find-links

- ~find-links~ で指定した場所から探しだしてもらう
#+begin_src shell
  pip install -f http://localhost:8000 zope.interface
#+end_src

** no-index

- 場合によってはpypiへの接続も制限される環境
- 全てをお手軽repositoryから取得するなら ~no-index~ も使うようにしてみよう

- ~no-index~ pypiなどのindexを見にいかない
- ~find-url~ 指定したページからダウンロードURLをスクレーピング

** indexは必要？

- pipを直接使うなら ~find-url~ でもいいかも？
- メタデータを取得するのに配布物をダウンロードするという効率の悪さはある
- ~poetry source add~ で使えるのは simple repository
  - pipだと ~--index-url~ で指定するものに相当

** 独自のpypiを立てたい!

- PyPI自体のソースコードは公開されている
  - https://github.com/pypi/warehouse
  - インフラ構築保守など手間もかかる
- devpi
  - https://github.com/devpi/devpi
  - PyPIへのプロキシやプロジェクトごとの名前空間設定など多機能
  - それなりにインフラ構築保守の手間がかかる
- ~http.server~ くらいに簡単に立ち上って欲しいところ

* パッケージを配るためのPEP
** パッケージを配るためのPEP
- [[https://peps.python.org/pep-0458][PEP 458 – Secure PyPI downloads with signed repository metadata]]
- [[https://peps.python.org/pep-0480][PEP 480 – Surviving a Compromise of PyPI: End-to-end signing of packages]]
- [[https://peps.python.org/pep-0503/][PEP 503 – Simple Repository API]]
- [[https://peps.python.org/pep-0592][PEP 592 – Adding “Yank” Support to the Simple API]]
- [[https://peps.python.org/pep-0629][PEP 629 – Versioning PyPI’s Simple API]]
- [[https://peps.python.org/pep-0658][PEP 658 – Serve Distribution Metadata in the Simple Repository API]]
- [[https://peps.python.org/pep-0691][PEP 691 – JSON-based Simple API for Python Package Indexes]]
- [[https://peps.python.org/pep-0700][PEP 700 – Additional Fields for the Simple API for Package Indexes]]
- [[https://peps.python.org/pep-0714][PEP 714 – Rename dist-info-metadata in the Simple API]]

** Simple Repository

representation

- HTML PEP503
- JSON PEP691

バージョン
- 1.0 PEP503/PEP691
- 1.1 PEP700
- PEP714 メタデータフィールドの取り扱いについての修正
  - warehouseの実装で間違えがあったらしい

** PyPIのSimple Repository

- https://pypi.org/simple/ とても大きいのでアクセス注意！


** 実装方針

- 標準ライブラリでいこう
  - Batteries Included!
- 1ファイルデプロイ
- DBなどを使わず起動するだけで使える

** 標準ライブラリでwebアプリケーションを書く

- json
- wsgiref

** simple repositoryの機能

- これだけ!
  - ~/~ project list
  - ~/{project}~ project detail
  - 実際にwheelファイルをダウンロードするURL
    - 今回は ~/{project}/files/{wheel}~ にします

** project list

- ホストしているプロジェクト(ほぼパッケージの意味)を一覧で出すだけ
- v1.0のプロジェクトに関する情報は ~name~ のみ

** project list のtyping

#+begin_src python
  Project = TypedDict("Project", {"name": str})
  ProjectList = TypedDict(
      "ProjectList",
      {
          "meta": Meta,
          "projects": list[Project],
      },
  )

#+end_src

** project detail

- プロジェクト(パッケージ)ごとのダウンロード可能なファイル一覧
- ファイルのURLやパッケージメタデータなど

** project detailのtyping

#+begin_src python
  ProjectDetail = TypedDict(
      "ProjectDetail",
      {
          "name": str,
          "files": list[ProjectFile],
          "meta": Meta,
      },
  )

#+end_src

** project fileのtyping

#+begin_src python
  ProjectFile = TypedDict(
      "ProjectFile",
      {
          "filename": str,
          "url": str,
          "hashes": dict[str, str],
          "requires-python": NotRequired[str],
          "dist-info-metadata": NotRequired[str],
          "gpg-sig": NotRequired[bool],
          "yanked": NotRequired[bool],
      },
  )

#+end_src


** pypi version

- 今回はv1.0の範囲でやってみます

#+begin_src js
  {
    "meta": {
      "api-version": "1.0"
    }
  }
#+end_src

** wheelファイルを探しだす

- pathlibでできちゃうね!

** wheelファイル名から情報を取得

- wheelファイルのファイル名は形式が決まっている
  - PEP 491 The Wheel Binary Package Format 1.9
  - ~{distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl.~

** wheelファイル名から情報を取得
- 今回欲しいのは ~distiribution~
- ~"-"~ で ~split~ して最初の1つ

#+begin_src python
  whl = "zope.interface-6.4.post0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl"
  whl.split("-", 1)[0] == "zope.interface"
#+end_src

** プロジェクト名を正規化

- PEP 503 で正式に正規化方法が定義されている
- アルファベットは全て小文字
- 記号は ~-~ に正規化
- 例: ~zope.interface~ -> ~zope-interface~

#+begin_src python
  import re

  def normalize(name):
      return re.sub(r"[-_.]+", "-", name).lower()
#+end_src

** metadata
- METADATAをwheelから取り出す
- wheelはzipファイル
- METADATAの場所は決まっている
  - PEP 491 The Wheel Binary Package Format 1.9
  - ~{distribution}-{version}.dist-info/~ contains metadata.

#+begin_src python
  def get_metadata(whl: pathlib.Path):
      parts = whl.name.split("-")
      dist_name, version = parts[0], parts[1]
      metadata_path = f"{dist_name}-{version}.dist-info/METADATA"
      with zipfile.ZipFile(whl) as zf:
          with zf.open(metadata_path) as metadata:
              return metadata.read()

#+end_src

** プロジェクトごとにファイル情報をまとめてJSON APIにする

** ダウンロード
- wheelファイルの中身をレスポンスボディにする
- wheelのcontent-typeは特に決まってないので ~application/octet-stream~ にする
- ブラウザでアクセスしたときにダウンロードになるよう ~Content-Disposition~ をつける
#+begin_src python
      def get_data(self, whl: str) -> bytes:
          with self.wheels[whl]["data"].open("br") as f:
              return f.read()

#+end_src
#+begin_src python
      def __call__(self, environ, start_response) -> Iterable[bytes]:
          whl = environ["wsgiorg.routing_args"][1]["wheel_name"]
          start_response("200 OK", [("Content-type", "application/octet-stream")])
          return [self.repo.get_data(whl)]

#+end_src
** pipから使う

- project list呼ばれてないかも？


#+begin_example
$ pip install pyramid --index-url=http://localhost:8000/
#+end_example

** The Update Framework
- TUF

* 参考文献
** 参考文献
- PyPA Simple Repository API, https://packaging.python.org/en/latest/specifications/simple-repository-api/
- The Update Framework, https://theupdateframework.io/
